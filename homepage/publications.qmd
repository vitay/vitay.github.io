---
title: "Publications"
echo: false
jupyter: python3
section-divs: false
keep-md: true
---

```{python}
import yaml
from IPython.display import display, Markdown, HTML

def readable_list(_s):
    if len(_s) < 3:
        return ' and '.join(map(str, _s))
    *a, b = _s
    return f"{', '.join(map(str, a))}, and {b}"

def button(url, str, icon):
    icon_base = icon[:2]
    return f"""<a class="btn btn-outline-dark btn-sm" href="{url}" target="_blank" rel="noopener noreferrer"> <i class="{icon_base} {icon}" role='img' aria-label='{str}'></i>{str}</a>"""

yaml_data = yaml.safe_load(open("papers.yaml"))

md_code = {}

for _, data in yaml_data.items():

    # Basic info
    title_str = data["title"]
    author_str = readable_list(data.get("authors"))
    year_str = data["year"]
    journal = data.get("journal")
    doi = data.get("doi")
    url = data.get("url")

    # Create the year if not existing yet
    if year_str not in md_code:
        md_code[year_str] = []

    # Build the markdown
    md_string = f"""
{author_str} ({year_str}) <br>
**{title_str}**  <br>
"""
    if journal is not None:
        md_string += f"{journal}  <br>\n"
    if doi is not None:
        md_string += f'[doi:{doi}](https://doi.org/{doi}) <br>\n'

    # Buttons
    buttons = []

    pub_url = data.get("url")
    if pub_url is not None:
        buttons.append(button(pub_url, "URL", "bi-journal"))

    pdf = data.get("pdf")
    if pdf is not None:
        buttons.append(button(pdf, "PDF", "bi-file-earmark-pdf"))

    preprint = data.get("preprint")
    if preprint is not None:
        buttons.append(button(preprint, "Preprint", "bi-file-earmark-pdf"))
        
    github = data.get("github")
    if github is not None:
        buttons.append(button(github, "Code", "bi-github"))

    poster = data.get("poster")
    if poster is not None:
        buttons.append(button(poster, "Poster", "bi-file-earmark-easel"))

    # Append
    md_code[year_str].append(
        md_string + "\n\n" + "\n".join(buttons) + "\n\n---\n\n"
    )
```


```{python}
#| label: "published-year"
#| id: "published-year"
#| output: asis
for year in sorted(md_code.keys(), reverse=True):
    display(Markdown(f"### {year}" + " {#" + f"published-{year}" + "}"))
    display(Markdown(
        '\n'.join(md_code[year])
    ))
```

